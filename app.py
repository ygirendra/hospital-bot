from flask import Flask, request, jsonify
import os
import requests
import datetime
from supabase_client import supabase

app = Flask(__name__)

# Doctor details
doctors = [
    {"name": "рдбрд╛. рдХрд┐рд╢реЛрд░ рдХреБрдорд╛рд░ рдкреМрдбреЗрд▓", "degree": "MBBS, DMRD (CMC VELLORE)", "speciality": "рд╡рд░рд┐рд╖реНрда рд░реЗрдбрд┐рдпреЛрд▓реЛрдЬрд┐рд╖реНрдЯ", "nmc": "13362", "time": "рдкреНрд░рддреНрдпреЗрдХ рджрд┐рди рд╡рд┐рд╣рд╛рди рео:режреж рдмрдЬреЗ рд░ рдмреЗрд▓реБрдХрд╛ рек:режреж рдмрдЬреЗ рджреЗрдЦрд┐"},
    {"name": "рдбрд╛. рдмрд░реБрдг рдЕрдЧреНрд░рд╡рд╛рд▓", "degree": "MBBS, MD (BPKIHS)", "speciality": "рд╡рд░рд┐рд╖реНрда рдирд╡рдЬрд╛рдд рд╢рд┐рд╢реБ рддрдерд╛ рдмрд╛рд▓ рд░реЛрдЧ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ", "nmc": "15375", "time": "рдкреНрд░рддреНрдпреЗрдХ рджрд┐рди рд╡рд┐рд╣рд╛рди реи:рейреж рдмрдЬреЗ рджреЗрдЦрд┐"},
    {"name": "рдбрд╛. рд╢рд┐рд╡реЗрд╕ рдЪреМрдзрд░реА", "degree": "MBBS, MS (BPKIHS)", "speciality": "рд╡рд░рд┐рд╖реНрда рд╕реНрддреНрд░реА рддрдерд╛ рдкреНрд░рд╕реВрддрд┐ рд░реЛрдЧ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ", "nmc": "16367", "time": "рдкреНрд░рддреНрдпреЗрдХ рд╢рдирд┐рд╡рд╛рд░ рд╡рд┐рд╣рд╛рди резреи:режреж рдмрдЬреЗ рджреЗрдЦрд┐"},
    {"name": "рдбрд╛. рджрд┐рд▓рд┐рдк рдЧреБрдкреНрддрд╛", "degree": "MBBS (BPKIHS), MD (BPKIHS)", "speciality": "рд╡рд░рд┐рд╖реНрда рдлрд┐рдЬрд┐рд╕рд┐рдпрди", "nmc": "17431", "time": "рдкреНрд░рддреНрдпреЗрдХ рд╢рдирд┐рд╡рд╛рд░ рд╡рд┐рд╣рд╛рди реи рдмрдЬреЗ рд░ рдордВрдЧрд▓рд╡рд╛рд░ рд╡рд┐рд╣рд╛рди рео рдмрдЬреЗ"},
    {"name": "рдбрд╛. рд░рд┐рддреЗрд╢ рдердкрд▓рд┐рдпрд╛", "degree": "MBBS MS (BPKIHS)", "speciality": "рд╡рд░рд┐рд╖реНрда рд╣рд╛рдб рдЬреЛрд░реНрдиреА рддрдерд╛ рдирд╕рд╛рд░реЛрдЧ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ", "nmc": "14215", "time": "рдкреНрд░рддреНрдпреЗрдХ рд╢рдирд┐рд╡рд╛рд░ рд░ рдордВрдЧрд▓рд╡рд╛рд░ рд╡рд┐рд╣рд╛рди рео:режреж рдмрдЬреЗ"},
    {"name": "рдбрд╛. рд╢рд╢рд╛рдВрдХрд░рд╛рдЬ рдкреЛрдЦрд░реЗрд▓", "degree": "MBBS, MD (BPKIHS)", "speciality": "рд╡рд░рд┐рд╖реНрда рдЯрд╛рдЙрдХреЛ, рдирд╕рд╛рд░реЛрдЧ рддрдерд╛ рдорд╛рдирд╕рд┐рдХ рд░реЛрдЧ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ", "nmc": "14450", "time": "рдкреНрд░рддреНрдпреЗрдХ рд╢рдирд┐рд╡рд╛рд░ рд╡рд┐рд╣рд╛рди рез:рейреж рдмрдЬреЗ рджреЗрдЦрд┐"},
    {"name": "рдбрд╛. рдкреЛрд╖рдг рддреНрд░рд┐рдкрд╛рдареА", "degree": "MBBS (IOM) MDGP (BPKIHS)", "speciality": "рд╡рд░рд┐рд╖реНрда рдлреЗрдорд┐рд▓реА рдлрд┐рдЬрд┐рд╕рд┐рдпрди", "nmc": "4783", "time": "рджреИрдирд┐рдХ рдмреЗрд▓реБрдХрд╛ рел рдмрдЬреЗ рджреЗрдЦрд┐"},
    {"name": "рдбрд╛. рдирд┐рд╕реНрддреБрдХ рдмрд░рд╛рд▓", "degree": "MBBS. MD (KU)", "speciality": "рд╡рд░рд┐рд╖реНрда рдЫрд╛рд▓рд╛, рдХреБрд╖реНрда, рдпреМрди рддрдерд╛ рд╕реМрдиреНрджрд░реНрдп рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ", "nmc": "16919", "time": "рдкреНрд░рддреНрдпреЗрдХ рд╢реБрдХреНрд░рд╡рд╛рд░ рей:режреж рдмрдЬреЗ рджреЗрдЦрд┐"},
    {"name": "рдбрд╛. рд╢рд┐рд╡ рднреВрд╖рдг рдкрдгреНрдбрд┐рдд", "degree": "MBBS(TU), MS(KU)", "speciality": "рд╡рд░рд┐рд╖реНрда рдирд╛рдХ, рдХрд╛рди, рдШрд╛рдБрдЯреА рд░реЛрдЧ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ", "nmc": "16947", "time": "рдкреНрд░рддреНрдпреЗрдХ рд╢рдирд┐рд╡рд╛рд░ рд╡рд┐рд╣рд╛рди реи:рейреж рдмрдЬреЗ рджреЗрдЦрд┐"},
    {"name": "рдбрд╛. рдЧреАрд░реЗрдиреНрджреНрд░ рдпрд╛рджрд╡", "degree": "MBBS, BPKIHS DHARAN", "speciality": "рдореЗрдбрд┐рдХрд▓ рдЕрдлрд┐рд╕рд░", "nmc": "32439", "time": "реирек рд╕реИ рдШрдгреНрдЯрд╛ рд╕реЗрд╡рд╛"}
]

# Lab test details
lab_tests = {
    "CBC": 300,
    "Lipid Profile": 800,
    "Blood Sugar (Fasting)": 100,
    "Thyroid Function Test": 1000,
    "RFT рдХрд┐рдбреНрдиреАрдХреЛ рдЬрд╛рдБрдЪ (Kidney Function)": 900,
    "LFT рдХрд╛рд▓реЗрдЬреЛрдВ рдЬрд╛рдБрдЪ": 900,
    "USG Abdomen Pelvis": 1000,
    "Other Test": "Please request the test you want. Prices are based according to market."
}

def auto_reply(message):
    message = message.lower()

    if "doctor" in message or "appointment" in message:
        reply = "ЁЯУЕ Doctor Appointment Schedule:\n"
        for doc in doctors:
            reply += f"тЮбя╕П {doc['name']} ({doc['speciality']}) - {doc['time']}\n"
        reply += "\nрдХреГрдкрдпрд╛ рдХреБрди рдбрд╛рдХреНрдЯрд░рд╕рдБрдЧ appointment рдЪрд╛рд╣рдиреБрд╣реБрдиреНрдЫ рднрдиреНрдиреБрд╣реЛрд╕реНред"
        return reply

    elif "lab" in message or "test" in message:
        reply = "ЁЯзк Available Lab Tests and Prices:\n"
        for test, price in lab_tests.items():
            reply += f"- {test}: Rs. {price}\n" if isinstance(price, int) else f"- {test}: {price}\n"
        reply += "\nрдХреГрдкрдпрд╛ рдХреБрди test рдХреЛ рд▓рд╛рдЧрд┐ appointment рдЪрд╛рд╣рдиреБрд╣реБрдиреНрдЫ рднрдиреНрдиреБрд╣реЛрд╕реНред"
        return reply

    elif "book" in message:
        return "ЁЯУЛ рдХреГрдкрдпрд╛ рдЖрдлреНрдиреЛ рдирд╛рдо рд░ рдлреЛрди рдирдореНрдмрд░ рдкрдард╛рдЙрдиреБрд╣реЛрд╕реН (format: Name, Phone) appointment рдмреБрдХ рдЧрд░реНрдиред"

    elif "," in message:
        try:
            name, phone = [x.strip() for x in message.split(",")]
            supabase.table("appointments").insert({
                "name": name,
                "phone": phone,
                "created_at": datetime.datetime.now().isoformat()
            }).execute()
            return f"тЬЕ Appointment booked successfully!\nЁЯСд Name: {name}\nЁЯУЮ Phone: {phone}"
        except Exception as e:
            print(f"Booking Error: {e}")
            return "тЭМ Booking failed. Please try again."

    elif "hello" in message or "hi" in message:
        return "ЁЯСЛ Welcome to Trihari Polyclinic & Diagnostic Centre!\nYou can ask about Doctors, Appointments, or Lab Tests."

    else:
        return "Sorry, I didn't understand. You can ask for 'doctor', 'appointment', 'lab test', or 'book'."

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    # WhatsApp verification (GET request)
    if request.method == 'GET':
        verify_token = os.getenv('WHATSAPP_VERIFY_TOKEN')
        if request.args.get('hub.verify_token') == verify_token:
            return request.args.get('hub.challenge')
        return "Invalid verification token"

    # Handle incoming messages (POST request)
    data = request.json
    
    # WhatsApp format
    if data.get('object') == 'whatsapp_business_account':
        try:
            message = data['entry'][0]['changes'][0]['value']['messages'][0]['text']['body']
            sender = data['entry'][0]['changes'][0]['value']['contacts'][0]['wa_id']
            reply = auto_reply(message)
            
            # Send reply via Meta API
            headers = {
                'Authorization': f"Bearer {os.getenv('WHATSAPP_TOKEN')}",
                'Content-Type': 'application/json'
            }
            payload = {
                "messaging_product": "whatsapp",
                "to": sender,
                "text": {"body": reply}
            }
            response = requests.post(
                f"https://graph.facebook.com/v18.0/{os.getenv('WHATSAPP_PHONE_ID')}/messages",
                headers=headers,
                json=payload
            )
            response.raise_for_status()
            return jsonify({"status": "success"}), 200
            
        except Exception as e:
            print(f"WhatsApp Error: {e}")
            return jsonify({"status": "error", "message": str(e)}), 500
    
    # General API format (for testing)
    elif request.is_json and 'message' in request.json:
        bot_reply = auto_reply(request.json['message'])
        return jsonify({"reply": bot_reply})
    
    return jsonify({"status": "unhandled request"}), 400

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
